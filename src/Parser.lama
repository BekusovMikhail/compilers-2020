
import Ostap;
import Lexer;
import List;
import Fun;


fun inbr (l, p, r) {
  syntax (-l p -r)
}


local primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                   	x=lident  {Var (x)}              |
                                    inbr[s("("), exp, s(")")]),
        binopoper = fun (l, op, r) {Binop(op, l, r)},
        opers = {[Left, [s("!!"), binopoper] : {}],
            [Left, [s("&&"), binopoper]: {}],
            [Nona, [s("<") | s(">") | s(">=") | s("<=") | s("==") | s("!="), binopoper] : {}],
            [Left, [s("+") | s("-"), binopoper] : {}],
            [Left, [s("*") | s("/") | s("%"), binopoper] : {}]},
        exp = memo $ eta expr(opers, primary);

local stmt = memo $ eta syntax (
        kWrite x=inbr[s("("), exp, s(")")] {Write(x)} |
        kRead x=inbr[s("("), lident, s(")")] {Read(x)} |
        x=lident s[":="] y = exp {Assn(x, y)} |
        x=stmt s[";"] y = stmt end {Seq(x, y)} |
        kSkip {Skip}
        );
   

public parse = stmt;
             
