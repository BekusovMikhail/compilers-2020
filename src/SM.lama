
import List;
import World;
import State;
import Expr;


fun eval (c@[st, state, w], insns) {
	case insns of
		  {} -> [st, state, w]
		| BINOP(op) : s -> eval([evalO(op, st[1][0], st[0]) : st[1][1], state, w], s)
		| CONST(n)  : s -> eval([n : st, state, w], s)
		| READ      : s -> local world_ = readWorld(w); eval([world_[0] : st, state, world_[1]], s)
		| WRITE     : s -> eval([st[1], state, writeWorld(st[0], w)], s)
		| LD(x)     : s -> eval([state(x) : st, state, w], s)
		| ST(x)     : s -> eval([st[1], state <- [x, st[0]], w], s)
	esac  
}


public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}


fun compileExpr (expr) {
  case expr of
		  Const (z) 	  ->  singleton(Const(z))
		| Var (el) 		  ->  singleton(LD(el))
		| Binop(op, l, r) ->  compileExpr(l) +++ compileExpr(r) +++ singleton(Binop(op)) 
    esac
}

public fun compileSM (stmt) {
  case stmt of 
	    Read (x) -> (READ : {}) +++ (ST (x) : {})
     	| Write (e) -> compileExpr (e) +++ (WRITE : {})
    	| Assn (x, e) -> compileExpr (e) +++ (ST (x) : {})
        | Seq (s1, s2) -> compileSM (s1) +++ compileSM (s2)
     	| Skip -> {}
  esac
}
